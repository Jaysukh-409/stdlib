/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //


// VARIABLES //


// MAIN //

/**
* Apply a mask to a provided input ndarray and assigns to one-dimensional output ndarray.
*
* ## Notes
*
* -   Each provided ndarray should be an `object` with the following properties:
*
*     -   **dtype**: data type.
*     -   **data**: data buffer.
*     -   **shape**: dimensions.
*     -   **strides**: stride lengths.
*     -   **offset**: index offset.
*     -   **order**: specifies whether an ndarray is row-major (C-style) or column major (Fortran-style).
*
* @param {ArrayLikeObject<Object>} arrays - array-like object containing input array, mask array and one output array
* @throws {Error} input and mask arrays must have the same shape
* @throws {Error} output array must have the one dimensional shape
* @returns {void}
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var mskfilter = require( '@stdlib/ndarray/base/mskfilter' );
*
* // Create data buffers:
* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );
* var mbuf = new Float64Array( [ 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ] );
*
* // Define the shape of the input and mask arrays:
* var shape = [ 3, 1, 2 ];
*
* // Define the array strides:
* var s = [ 4, 4, 1 ];
*
* // Define the index offsets:
* var ox = 0;
* var om = 0;
*
* // Create the input, mask and output ndarray-like objects:
* var x = {
*     'dtype': 'float64',
*     'data': xbuf,
*     'shape': shape,
*     'strides': s,
*     'offset': ox,
*     'order': 'row-major'
* };
* var mask = {
*     'dtype': 'float64',
*     'data': mbuf,
*     'shape': shape,
*     'strides': s,
*     'offset': om,
*     'order': 'row-major'
* };
* var out = {
*     'dtype': 'float64',
*     'data': new Float64Array( 4 ),
*     'shape': [ 4 ],
*     'strides': [ 1 ],
*     'offset': 0,
*     'order': 'row-major'
* };
*
* // Copy elements:
* mskfilter( [ x, mask, out ] );
*
* console.log( out.data );
* // => <Float64Array>[ 1.0, 5.0, 9.0, 11.0 ]
*/
function mskfilter( arrays ) {
    
}