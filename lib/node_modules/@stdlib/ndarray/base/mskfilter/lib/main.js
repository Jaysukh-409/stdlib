/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //


var ndarray2object = require( '@stdlib/ndarray/base/ndarraylike2object' );
var format = require( '@stdlib/string/format' );
var numel = require( '@stdlib/ndarray/base/numel' );
var accessor_mskfilter0d = require( './0d_accessors.js' );
var mskfilter0d = require( './0d.js' );

// VARIABLES //


var MSKFILTER = [
    mskfilter0d,
];

var ACCESSOR_MSKFILTER = [
    accessor_mskfilter0d,
];

var BLOCKED_MSKFILTER = [   
    
];

var BLOCKED_ACCESSOR_MSKFILTER = [

];

var MAX_DIMS = MSKFILTER.length - 1;


// MAIN //

/**
* Apply a mask to a provided input ndarray and assigns to one-dimensional output ndarray.
*
* ## Notes
*
* -   Each provided ndarray should be an `object` with the following properties:
*
*     -   **dtype**: data type.
*     -   **data**: data buffer.
*     -   **shape**: dimensions.
*     -   **strides**: stride lengths.
*     -   **offset**: index offset.
*     -   **order**: specifies whether an ndarray is row-major (C-style) or column major (Fortran-style).
*
* @param {ArrayLikeObject<Object>} arrays - array-like object containing input array, mask array and output array
* @throws {Error} input and mask arrays must have the same shape
* @throws {Error} output array must have the one dimensional shape
* @throws {Error} input and output arrays must have the same data type
* @returns {void}
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var mskfilter = require( '@stdlib/ndarray/base/mskfilter' );
*
* // Create data buffers:
* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );
* var mbuf = new Float64Array( [ 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ] );
* var ybuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
*
* // Define the shape of the input and mask arrays:
* var shape = [ 3, 1, 2 ];
*
* // Define the array strides:
* var s = [ 4, 4, 1 ];
*
* // Define the index offsets:
* var ox = 0;
* var om = 0;
*
* // Create the input, mask and output ndarray-like objects:
* var x = {
*     'dtype': 'float64',
*     'data': xbuf,
*     'shape': shape,
*     'strides': s,
*     'offset': ox,
*     'order': 'row-major'
* };
* var mask = {
*     'dtype': 'float64',
*     'data': mbuf,
*     'shape': shape,
*     'strides': s,
*     'offset': om,
*     'order': 'row-major'
* };
* var out = {
*     'dtype': 'float64',
*     'data': ybuf,
*     'shape': [ 4 ],
*     'strides': [ 1 ],
*     'offset': 0,
*     'order': 'row-major'
* };
*
* // Copy elements:
* mskfilter( [ x, mask, out ] );
*
* console.log( out.data );
* // => <Float64Array>[ 1.0, 5.0, 9.0, 11.0 ]
*/
function mskfilter( arrays ) {
    var ndims;
    var mask;
    var shm;
    var shx;
    var x;
    var y;

    // Unpack the ndarrays and standardize ndarray meta data:
    x = ndarray2object( arrays[ 0 ] );
    mask = ndarray2object( arrays[ 1 ] );
    y = ndarray2object( arrays[ 2 ] );

    // Verify that the input and mask arrays have the same number of dimensions...
    shx = x.shape;
    shm = mask.shape;
    ndims = shx.length;
    if ( ndims !== shm.length ) {
        throw new Error( format( 'invalid arguments. Arrays must have the same number of dimensions (i.e., same rank). ndims(x) == %s. ndims(mask) == %s', ndims, shm.length ) );
    }

    // Verify that the input and mask arrays have the same shape...
    for ( var i = 0; i < ndims; i++ ) {
        if ( shx[ i ] !== shm[ i ] ) {
            throw new Error( format( 'invalid arguments. Arrays must have the same shape. shape(x)[%s] == %s. shape(mask)[%s] == %s', i, shx[ i ], i, shm[ i ] ) );
        }
    }

    // Verify that the output array has a one-dimensional shape...
    if ( y.shape.length !== 1 ) {
        throw new Error( 'invalid argument. Output array must have a one-dimensional shape. ndims(y) == %s', y.shape.length );
    }

    // Verify that the output array and input array have same data type...
    if ( x.dtype !== y.dtype ) {
        throw new Error( 'invalid arguments. Input and output arrays must have the same data type. dtype(x) == %s. dtype(y) == %s', x.dtype, y.dtype );
    }

    // Check whether we were provided an empty input ndarray...
    if ( numel( shx ) === 0 ) {
        return;
    }

    // Determine whether we can avoid iteration altogether...
    if ( ndims == 0 ) {
        if ( x.accessorProtocol || mask.accessorProtocol || y.accessorProtocol ) {
            return ACCESSOR_MSKFILTER[ ndims ]( x, mask, y );
        }
        return MSKFILTER[ ndims ]( x, mask, y );
    }
}


// EXPORTS //

module.exports = mskfilter;